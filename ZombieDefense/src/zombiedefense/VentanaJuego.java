
package zombiedefense;
import java.awt.GridLayout;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class VentanaJuego extends javax.swing.JFrame {
    //Etiquetas del tablero
    public static JLabel etiqueta1,etiqueta2,etiqueta3,etiqueta4,etiqueta5,etiqueta6,etiqueta7,etiqueta8,etiqueta9,etiqueta10,etiqueta11,etiqueta12,
            etiqueta13,etiqueta14,etiqueta15,etiqueta16,etiqueta17,etiqueta18,etiqueta19,etiqueta20,etiqueta21,etiqueta22,etiqueta23,etiqueta24,
            etiqueta25,etiqueta26,etiqueta27,etiqueta28,etiqueta29,etiqueta30;
    
    //Variables que se utilizan para representar el juego
    public static JLabel[] arregloEtiquetas = new JLabel[35];
    public static JLabel[][] matrizEtiquetas = new JLabel[7][5];//Matriz Grafica
    public static Personaje[][] matrizObjetos = new Personaje[7][5];//Matriz Logica
    public int turnos = 0;
    public int movimientos = 0;
    public int eleccionP = 0;
    public int ronda = 12;
    public int HabilidadB = 3;
    public int HabilidadE = 3;
    public int HabilidadA = 3;
    //Cpnstructor
    public VentanaJuego() {
        initComponents();
        this.setLocationRelativeTo(null);
        IniciarTablero();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        buttonGroup1 = new javax.swing.ButtonGroup();
        tablero = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelMensaje1 = new javax.swing.JLabel();
        BotonIzquierda = new javax.swing.JLabel();
        BotonAvanzar = new javax.swing.JLabel();
        BotonDerecha = new javax.swing.JLabel();
        BotonRetroceder = new javax.swing.JLabel();
        jLabelBotonSalir = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        HabilidadEspecial = new javax.swing.JLabel();
        Disparar = new javax.swing.JLabel();
        Item = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        tablero.setVisible(true);

        javax.swing.GroupLayout tableroLayout = new javax.swing.GroupLayout(tablero.getContentPane());
        tablero.getContentPane().setLayout(tableroLayout);
        tableroLayout.setHorizontalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1021, Short.MAX_VALUE)
        );
        tableroLayout.setVerticalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 675, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(102, 0, 0)));
        jPanel1.setForeground(new java.awt.Color(255, 204, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Kristen ITC", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 0));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 600, 180, 53));

        jLabelMensaje1.setFont(new java.awt.Font("Felix Titling", 1, 12)); // NOI18N
        jLabelMensaje1.setForeground(new java.awt.Color(51, 0, 0));
        jLabelMensaje1.setText("Escoja un personaje");
        jLabelMensaje1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(51, 0, 0)));
        jPanel1.add(jLabelMensaje1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 150, 40));

        BotonIzquierda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FlechaIzq.jpg"))); // NOI18N
        BotonIzquierda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonIzquierdaMouseClicked(evt);
            }
        });
        jPanel1.add(BotonIzquierda, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 80, 50));

        BotonAvanzar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FlechaArriba (1).jpg"))); // NOI18N
        BotonAvanzar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonAvanzarMouseClicked(evt);
            }
        });
        jPanel1.add(BotonAvanzar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 220, -1, -1));

        BotonDerecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FlechaDerecha.jpg"))); // NOI18N
        BotonDerecha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonDerechaMouseClicked(evt);
            }
        });
        jPanel1.add(BotonDerecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, 80, 50));

        BotonRetroceder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FlechaAbajo.jpg"))); // NOI18N
        BotonRetroceder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonRetrocederMouseClicked(evt);
            }
        });
        jPanel1.add(BotonRetroceder, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, -1, -1));

        jLabelBotonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/BotonSalirJ.png"))); // NOI18N
        jLabelBotonSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelBotonSalirMouseClicked(evt);
            }
        });
        jPanel1.add(jLabelBotonSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 650, 130, 50));

        jRadioButton1.setBackground(new java.awt.Color(51, 0, 0));
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setForeground(new java.awt.Color(255, 204, 51));
        jRadioButton1.setText("Revenant");
        jRadioButton1.setBorder(null);
        jRadioButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButton1MouseClicked(evt);
            }
        });
        jPanel1.add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 80, 30));

        jRadioButton2.setBackground(new java.awt.Color(51, 0, 0));
        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setForeground(new java.awt.Color(255, 204, 51));
        jRadioButton2.setText("Scout");
        jRadioButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButton2MouseClicked(evt);
            }
        });
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, 80, 30));

        jRadioButton3.setBackground(new java.awt.Color(51, 0, 0));
        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setForeground(new java.awt.Color(255, 204, 51));
        jRadioButton3.setText("Dheylo");
        jRadioButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButton3MouseClicked(evt);
            }
        });
        jPanel1.add(jRadioButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, 80, 30));

        jLabel2.setFont(new java.awt.Font("Felix Titling", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 0, 0));
        jLabel2.setText("Turnos Restantes 12");
        jLabel2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(51, 0, 0)));
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 150, -1));

        HabilidadEspecial.setFont(new java.awt.Font("Felix Titling", 1, 12)); // NOI18N
        HabilidadEspecial.setForeground(new java.awt.Color(51, 0, 0));
        HabilidadEspecial.setText("Habilidad Especial");
        HabilidadEspecial.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(51, 0, 0)));
        HabilidadEspecial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HabilidadEspecialMouseClicked(evt);
            }
        });
        jPanel1.add(HabilidadEspecial, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, 130, 40));

        Disparar.setFont(new java.awt.Font("Felix Titling", 1, 12)); // NOI18N
        Disparar.setForeground(new java.awt.Color(51, 0, 0));
        Disparar.setText("Disparar");
        Disparar.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(51, 0, 0)));
        Disparar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DispararMouseClicked(evt);
            }
        });
        jPanel1.add(Disparar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, 130, 40));

        Item.setFont(new java.awt.Font("Felix Titling", 1, 12)); // NOI18N
        Item.setForeground(new java.awt.Color(51, 0, 0));
        Item.setText("Utilizar Item");
        Item.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(51, 0, 0)));
        Item.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemMouseClicked(evt);
            }
        });
        jPanel1.add(Item, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, 130, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablero)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tablero)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jLabelBotonSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBotonSalirMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelBotonSalirMouseClicked

    //Modifican la eleccion de cual personaje se va a utilizar.
    private void jRadioButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButton1MouseClicked
        // TODO add your handling code here:
        eleccionP = 1;
    }//GEN-LAST:event_jRadioButton1MouseClicked

    private void jRadioButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButton2MouseClicked
        // TODO add your handling code here:
        eleccionP = 2;
    }//GEN-LAST:event_jRadioButton2MouseClicked

    private void jRadioButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButton3MouseClicked
        // TODO add your handling code here:
        eleccionP = 3;
    }//GEN-LAST:event_jRadioButton3MouseClicked
    //Verificar si todos estan muertos
    public void Spawnear(){
        boolean condicion = (turnos%2)==0;
        if(condicion){
            int cont = turnos/2;
            while(cont!=0){
                int i = (int) Math.floor(Math.random()*(6-4+1)+4);
                int j = (int) Math.floor(Math.random()*(4-0+1)+0);
                int tipo = (int) Math.floor(Math.random()*(3-1+1)+1);
                boolean spawnInvalido = (esPersonaje(i,j))||(esZombie(i,j))||(esObstaculo(i,j)); 
                if(!spawnInvalido){
                    switch (tipo) {
                    case 1:
                        matrizObjetos[i][j] = new Ghoul(10,1,950,500,0,2,0,null);
                        break;
                    case 2:
                        matrizObjetos[i][j] = new Chubby(25,1,2500,1000,0,2,0,null);
                        break;
                    default: 
                        matrizObjetos[i][j] = new Lakelurk(1,1500,1500,0,2,0,null);
                        break;
                    }
                } 
                cont--;
            }
        }
        
    }
    public boolean esObstaculo(int i, int j){
        Casilla elemento = (Casilla)matrizObjetos[i][j];
        if(elemento.isObstaculizado()){
            return true;
        }
        else{
            return false;
        }
    }
    public boolean esZombie(int i, int j){
        boolean esZombie = (matrizObjetos[i][j] instanceof Ghoul)||(matrizObjetos[i][j] instanceof Chubby)||(matrizObjetos[i][j] instanceof Lakelurk);
        if(esZombie){
            return true;
        }
        else{
            return false;
        }
    }
    
    public boolean esPersonaje(int i,int j){
        boolean esPersonaje = (matrizObjetos[i][j] instanceof Asesino)||(matrizObjetos[i][j] instanceof Blindado)||(matrizObjetos[i][j] instanceof Explorador);
        if(esPersonaje){
            return true;
        }
        else{
            return false;
        }
    }
    public boolean TodosMuertos(){
        for(int i=0;i<7;i++){
            for(int j=0;j<5;j++){
                boolean esPersonaje = (matrizObjetos[i][j] instanceof Asesino)||(matrizObjetos[i][j] instanceof Blindado)||(matrizObjetos[i][j] instanceof Explorador);
                if(esPersonaje){
                    return false;
                }
            }
        }
        return true;
    }
    
    
    public boolean ZombiesMuertos(){
        for(int i=0;i<7;i++){
            for(int j=0;j<5;j++){
                boolean esPersonaje = (matrizObjetos[i][j] instanceof Chubby)||(matrizObjetos[i][j] instanceof Ghoul)||(matrizObjetos[i][j] instanceof Lakelurk);
                if(esPersonaje){
                    return false;
                }
            }
        }
        return true;
    }
    //Actualizar stats
    public void ActualizarStats(){
        for(int i=0;i<7;i++){
            for(int j=0;j<5;j++){
                boolean condition = matrizObjetos[i][j] instanceof Casilla;
                if(!condition ){
                    boolean esPersonaje = (esPersonaje(i,j));
                    if(esPersonaje){
                        matrizObjetos[i][j].setNivel(matrizObjetos[i][j].getNivel()+1);
                        matrizObjetos[i][j].setAtaque(turnos*50);
                        matrizObjetos[i][j].setSalud(matrizObjetos[i][j].getSalud()+100);
                    }
                    else if(matrizObjetos[i][j] instanceof Ghoul){
                        matrizObjetos[i][j].setAtaque(matrizObjetos[i][j].getAtaque()+50);
                        matrizObjetos[i][j].setSalud(matrizObjetos[i][j].getSalud()+50);
                    }
                }
            }
        }
    }
    //Actualizar turnos
    public void ActualizarTurnos(int movimientos){
        if(turnos<12){
            if(movimientos%3==0){
                ronda--;
                turnos++;
                jLabel2.setText("Turnos Restantes " + ronda );
                MoverZombies();
                ActualizarStats();
                Spawnear();
            }
        }else{
            MoverZombies();
        }
    }
    
    //Verificar si hay un obstaculo delante
    public boolean PoderAvanzar(int x, int y){
        boolean rangoValido = 6>=x+1;
        if(rangoValido){
            if(matrizObjetos[x+1][y] instanceof Casilla){
                Casilla elemento = (Casilla) matrizObjetos[x+1][y];
                if(elemento.isObstaculizado()){
                    return false;
                }
                else{
                    return true;
                }
            }
            else{
                return false;
            }
        }
        else{
            return false;
        }
    }
//Verificar si hay un obstaculo a la derecha
    public boolean PoderAvanzarDerecha(int x, int y){
        boolean rangoValido = 4>=y+1;
        if(rangoValido){
            if(matrizObjetos[x][y+1] instanceof Casilla){
                Casilla elemento = (Casilla) matrizObjetos[x][y+1];
                if(elemento.isObstaculizado()){
                    return false;
                }
                else{
                    return true;
                }
            }
            else{
                return false;
            }
        }
        else{
            return false;
        }
    }
    
//Verificar si hay un obstaculo atras
    public boolean PoderAvanzarAtras(int x, int y){
        boolean rangoValido = x-1>=1;
        if(rangoValido){
            if(matrizObjetos[x-1][y] instanceof Casilla){
                Casilla elemento = (Casilla) matrizObjetos[x-1][y];
                if(elemento.isObstaculizado()){
                    return false;
                }
                else{
                    return true;
                }
            }
            else{
                return false;
            }
        }
        else{
            return false;
        }
    }

//Verificar si hay un obstaculo atras
    public boolean PoderAvanzarIzquierda(int x, int y){
        boolean rangoValido = y-1>=0;
        if(rangoValido){
            if(matrizObjetos[x][y-1] instanceof Casilla){
                Casilla elemento = (Casilla) matrizObjetos[x][y-1];
                if(elemento.isObstaculizado()){
                    return false;
                }
                else{
                    return true;
                }
            }
            else{
                return false;
            }
        }
        else{
            return false;
        }
    }
    //Avanzar hacia delante
    private void BotonAvanzarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonAvanzarMouseClicked
        if(eleccionP == 0){
            JOptionPane.showMessageDialog(null, "Debe de seleccionar el personaje que va a utilizar en esta ronda.");
        }
        else{
            switch (eleccionP) {
                case 1:
                    if(EncontrarBlindado()){
                        int[] xyB = RetornaBlindado();
                        if(PoderAvanzarAtras(xyB[0],xyB[1])){
                            if(matrizObjetos[xyB[0]-1][xyB[1]].getLoot()!=null){
                                matrizObjetos[xyB[0]][xyB[1]].setLoot(matrizObjetos[xyB[0]-1][xyB[1]].getLoot());
                            }
                            matrizObjetos[xyB[0]-1][xyB[1]] = matrizObjetos[xyB[0]][xyB[1]];
                            matrizObjetos[xyB[0]][xyB[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyB[0]][xyB[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Revenant avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }
                    }           
                case 2:
                    if(EncontrarExplorador()){
                      int[] xyE = RetornaExplorador();
                        if(PoderAvanzarAtras(xyE[0],xyE[1])){
                            if(matrizObjetos[xyE[0]-1][xyE[1]].getLoot()!=null){
                                matrizObjetos[xyE[0]][xyE[1]].setLoot(matrizObjetos[xyE[0]-1][xyE[1]].getLoot());
                            }
                            matrizObjetos[xyE[0]-1][xyE[1]] = matrizObjetos[xyE[0]][xyE[1]];
                            matrizObjetos[xyE[0]][xyE[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyE[0]][xyE[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Scout avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }  
                    }
                case 3:
                    if(EncontrarAsesino()){
                        int[] xyA = RetornaAsesino();
                        if(PoderAvanzarAtras(xyA[0],xyA[1])){
                            if(matrizObjetos[xyA[0]-1][xyA[1]].getLoot()!=null){
                                matrizObjetos[xyA[0]][xyA[1]].setLoot(matrizObjetos[xyA[0]-1][xyA[1]].getLoot());
                            }
                            matrizObjetos[xyA[0]-1][xyA[1]] = matrizObjetos[xyA[0]][xyA[1]];
                            matrizObjetos[xyA[0]][xyA[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyA[0]][xyA[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Dheylo avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        } 
                    }   
            }
            ActualizarMatriz();
        }
    }//GEN-LAST:event_BotonAvanzarMouseClicked

    private void BotonDerechaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonDerechaMouseClicked
        if(eleccionP == 0){
            JOptionPane.showMessageDialog(null, "Debe de seleccionar el personaje que va a utilizar en esta ronda.");
        }
        else{
            switch (eleccionP) {
                case 1:
                    if(EncontrarBlindado()){
                        int[] xyB = RetornaBlindado();
                        if(PoderAvanzarDerecha(xyB[0],xyB[1])){
                            if(matrizObjetos[xyB[0]][xyB[1]+1].getLoot()!=null){
                                matrizObjetos[xyB[0]][xyB[1]].setLoot(matrizObjetos[xyB[0]][xyB[1]+1].getLoot());
                            }
                            matrizObjetos[xyB[0]][xyB[1]+1] = matrizObjetos[xyB[0]][xyB[1]];
                            matrizObjetos[xyB[0]][xyB[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyB[0]][xyB[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Revenant avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }
                    }
                case 2:
                    if(EncontrarExplorador()){
                        int[] xyE = RetornaExplorador();
                        if(PoderAvanzarDerecha(xyE[0],xyE[1])){
                            if(matrizObjetos[xyE[0]][xyE[1]+1].getLoot()!=null){
                                matrizObjetos[xyE[0]][xyE[1]].setLoot(matrizObjetos[xyE[0]][xyE[1]+1].getLoot());
                            }
                            matrizObjetos[xyE[0]][xyE[1]+1] = matrizObjetos[xyE[0]][xyE[1]];
                            matrizObjetos[xyE[0]][xyE[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyE[0]][xyE[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Scout avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }
                    }    
                case 3:
                    if(EncontrarAsesino()){
                        int[] xyA = RetornaAsesino();
                        if(PoderAvanzarDerecha(xyA[0],xyA[1])){
                            if(matrizObjetos[xyA[0]][xyA[1]+1].getLoot()!=null){
                                matrizObjetos[xyA[0]][xyA[1]].setLoot(matrizObjetos[xyA[0]][xyA[1]+1].getLoot());
                            }
                            matrizObjetos[xyA[0]][xyA[1]+1] = matrizObjetos[xyA[0]][xyA[1]];
                            matrizObjetos[xyA[0]][xyA[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyA[0]][xyA[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Dheylo avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }
                    } 
            }
            ActualizarMatriz();
        }
    }//GEN-LAST:event_BotonDerechaMouseClicked

    private void BotonRetrocederMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonRetrocederMouseClicked
        if(eleccionP == 0){
            JOptionPane.showMessageDialog(null, "Debe de seleccionar el personaje que va a utilizar en esta ronda.");
        }
        else{
            switch (eleccionP) {
                case 1:
                    if(EncontrarBlindado()){
                        int[] xyB = RetornaBlindado();
                        if(PoderAvanzar(xyB[0],xyB[1])){
                            if(matrizObjetos[xyB[0]+1][xyB[1]].getLoot()!=null){
                                matrizObjetos[xyB[0]][xyB[1]].setLoot(matrizObjetos[xyB[0]+1][xyB[1]].getLoot());
                            }
                            matrizObjetos[xyB[0]+1][xyB[1]] = matrizObjetos[xyB[0]][xyB[1]];
                            matrizObjetos[xyB[0]][xyB[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyB[0]][xyB[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Revenant avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }
                    } 
                case 2:
                    if(EncontrarExplorador()){
                        int[] xyE = RetornaExplorador();
                        if(PoderAvanzar(xyE[0],xyE[1])){
                            if(matrizObjetos[xyE[0]+1][xyE[1]].getLoot()!=null){
                                matrizObjetos[xyE[0]][xyE[1]].setLoot(matrizObjetos[xyE[0]+1][xyE[1]].getLoot());
                            }
                            matrizObjetos[xyE[0]+1][xyE[1]] = matrizObjetos[xyE[0]][xyE[1]];
                            matrizObjetos[xyE[0]][xyE[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyE[0]][xyE[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Scout avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }
                    }
                case 3:
                    if(EncontrarAsesino()){
                        int[] xyA = RetornaAsesino();
                        if(PoderAvanzar(xyA[0],xyA[1])){
                            if(matrizObjetos[xyA[0]+1][xyA[1]].getLoot()!=null){
                                matrizObjetos[xyA[0]][xyA[1]].setLoot(matrizObjetos[xyA[0]+1][xyA[1]].getLoot());
                            }
                            matrizObjetos[xyA[0]+1][xyA[1]] = matrizObjetos[xyA[0]][xyA[1]];
                            matrizObjetos[xyA[0]][xyA[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyA[0]][xyA[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Dheylo avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }
                    }    
            }
            ActualizarMatriz();
        }
    }//GEN-LAST:event_BotonRetrocederMouseClicked

    private void BotonIzquierdaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonIzquierdaMouseClicked
        if(eleccionP == 0){
            JOptionPane.showMessageDialog(null, "Debe de seleccionar el personaje que va a utilizar en esta ronda.");
        }
        else{
            switch (eleccionP) {
                case 1:
                    if(EncontrarBlindado()){
                        int[] xyB = RetornaBlindado();
                        if(PoderAvanzarIzquierda(xyB[0],xyB[1])){
                            if(matrizObjetos[xyB[0]][xyB[1]-1].getLoot()!=null){
                                matrizObjetos[xyB[0]][xyB[1]].setLoot(matrizObjetos[xyB[0]][xyB[1]-1].getLoot());
                            }
                            matrizObjetos[xyB[0]][xyB[1]-1] = matrizObjetos[xyB[0]][xyB[1]];
                            matrizObjetos[xyB[0]][xyB[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyB[0]][xyB[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Revenant avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }
                    }
                case 2:
                    if(EncontrarExplorador()){
                        int[] xyE = RetornaExplorador();
                        if(PoderAvanzarIzquierda(xyE[0],xyE[1])){
                            if(matrizObjetos[xyE[0]][xyE[1]-1].getLoot()!=null){
                                matrizObjetos[xyE[0]][xyE[1]].setLoot(matrizObjetos[xyE[0]][xyE[1]-1].getLoot());
                            }
                            matrizObjetos[xyE[0]][xyE[1]-1] = matrizObjetos[xyE[0]][xyE[1]];
                            matrizObjetos[xyE[0]][xyE[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyE[0]][xyE[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Scout avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        }
                    }
                case 3:
                    if(EncontrarAsesino()){
                       int[] xyA = RetornaAsesino();
                        if(PoderAvanzarIzquierda(xyA[0],xyA[1])){
                            if(matrizObjetos[xyA[0]][xyA[1]-1].getLoot()!=null){
                                matrizObjetos[xyA[0]][xyA[1]].setLoot(matrizObjetos[xyA[0]][xyA[1]-1].getLoot());
                            }
                            matrizObjetos[xyA[0]][xyA[1]-1] = matrizObjetos[xyA[0]][xyA[1]];
                            matrizObjetos[xyA[0]][xyA[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[xyA[0]][xyA[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                            jLabel1.setText("Dheylo avanza");
                            movimientos++;
                            ActualizarTurnos(movimientos);
                            break;
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Acción inválida. Estás tratando de dejar el campo de batalla.");
                            break;
                        } 
                    }    
            }
            ActualizarMatriz();
        }
    }//GEN-LAST:event_BotonIzquierdaMouseClicked

    private void HabilidadEspecialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HabilidadEspecialMouseClicked
        if(eleccionP == 0){
            JOptionPane.showMessageDialog(null, "Debe de seleccionar el personaje que va a utilizar en esta ronda.");
        }
        else{
            //Variabes Generales
            int xy[];
            switch (eleccionP) {
                case 1:
                    //Habilidad especial de Revenant
                    xy = RetornaBlindado();      
                    int nivel = matrizObjetos[xy[0]][xy[1]].getNivel();
                    if(nivel>=4){
                        //Escudo extra
                        if(HabilidadB!=0){
                            Blindado elemento = (Blindado)matrizObjetos[xy[0]][xy[1]];
                            elemento.setSalud(elemento.getSalud()+500);
                            //La vida se ha aumentado 500 puntos
                            jLabel1.setText("+500pts de salud");
                        }else{
                            JOptionPane.showMessageDialog(null,"No tienes energía para seguir usando esta habilidad ");
                        }HabilidadB--;
                    }else{
                        JOptionPane.showMessageDialog(null,"Deberas de sobrevivir más rondas si deseas utilizar la habilidad especial");
                    }
                    break;
                case 2:
                    //Habilidad especial de Scout
                    xy = RetornaExplorador();      
                    nivel = matrizObjetos[xy[0]][xy[1]].getNivel();
                    if(nivel>=4){
                        // Matar una fila entera
                        if(HabilidadE!=0){
                          for(int i = xy[0]; i<7; i++){
                                if(esZombie(i,xy[1])){
                                    Items item = CrearItem();
                                    matrizObjetos[i][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                    matrizEtiquetas[i][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                    ActualizarMatriz();
                                }
                            }  
                        }else{
                            JOptionPane.showMessageDialog(null,"No tienes energía para seguir usando esta habilidad ");
                        }HabilidadE--;                    
                    }else{
                        JOptionPane.showMessageDialog(null,"Deberas de sobrevivir más rondas si deseas utilizar la habilidad especial");
                    }
                    break;
                case 3:
                    xy = RetornaAsesino();      
                    nivel = matrizObjetos[xy[0]][xy[1]].getNivel();
                    if(nivel>=4){
                        if(HabilidadA!=0){
                             //Retoceder a la base
                            boolean flag = false;
                            for(int i = 0; i<=4; i++){
                                if(esZombie(1,i)){
                                   flag = true;
                                   Items item = CrearItem();
                                   matrizObjetos[1][i] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                   matrizEtiquetas[1][i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                   matrizObjetos[1][i] = matrizObjetos[xy[0]][xy[1]];
                                   matrizObjetos[xy[0]][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                   matrizEtiquetas[xy[0]][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                   ActualizarMatriz();
                                   HabilidadA--;
                                   break;
                                }
                            }
                        }else{
                            JOptionPane.showMessageDialog(null,"No tienes energía para seguir usando esta habilidad ");
                        }
                    }else{
                        JOptionPane.showMessageDialog(null,"Deberas de sobrevivir más rondas si deseas utilizar la habilidad especial");
                    }
                    //Habilidad especial de Dheylo
                    break;
            }
        }
    }//GEN-LAST:event_HabilidadEspecialMouseClicked
    private Items CrearItem(){
        int tipo = (int) Math.floor(Math.random()*(3-1+1)+1);
        switch(tipo){
            case 1:
                Botiquin botiquin = new Botiquin(500,false);
                jLabel1.setText("Curación en el campo");
                return botiquin;
            case 2:
                Explosivo explosivo = new Explosivo(2,750,false);
                jLabel1.setText("Granadas cerca");
                return explosivo;
            default:
                Potenciador potenciador = new Potenciador(1,200,false);
                jLabel1.setText("Potenciador ve por él!");
                return potenciador;   
        }
    }
    private void DispararMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DispararMouseClicked
        if(eleccionP == 0){
            JOptionPane.showMessageDialog(null, "Debe de seleccionar el personaje que va a utilizar en esta ronda.");
        }
        else{
            movimientos++;
            ActualizarTurnos(movimientos);
            int xy [];
            int cont;
            switch (eleccionP) {
                case 1:
                    if(EncontrarExplorador()){
                        //Dispara Revenant
                        xy = RetornaBlindado();      
                        cont = 0;
                        while(cont<=matrizObjetos[xy[0]][xy[1]].getRangoDeVision()){
                            if(xy[0]-cont>=0){
                                if((matrizObjetos[xy[0]-cont][xy[1]] instanceof Chubby) || (matrizObjetos[xy[0]-cont][xy[1]] instanceof Lakelurk) || (matrizObjetos[xy[0]-cont][xy[1]] instanceof Ghoul)){
                                    Blindado elemento = (Blindado)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getShotgun().getDaño()*elemento.getShotgun().getPrecision()/100+elemento.getShotgun().getPenetracion());
                                    matrizObjetos[xy[0]-cont][xy[1]].setSalud(matrizObjetos[xy[0]-cont][xy[1]].getSalud()-damage);
                                    jLabel1.setText("Revenant inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]-cont][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]-cont][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]-cont][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }

                            }
                            if(xy[1]-cont>=0){
                                if((matrizObjetos[xy[0]][xy[1]-cont] instanceof Chubby) || (matrizObjetos[xy[0]][xy[1]-cont] instanceof Lakelurk) || (matrizObjetos[xy[0]][xy[1]-cont] instanceof Ghoul)){
                                    Blindado elemento = (Blindado)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getShotgun().getDaño()*elemento.getShotgun().getPrecision()/100+elemento.getShotgun().getPenetracion());
                                    matrizObjetos[xy[0]][xy[1]-cont].setSalud(matrizObjetos[xy[0]][xy[1]-cont].getSalud()-damage);
                                    jLabel1.setText("Revenant inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]][xy[1]-cont].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]-cont] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]-cont].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }
                            }
                            if (xy[0]+cont<=6){
                                if((matrizObjetos[xy[0]+cont][xy[1]] instanceof Chubby) || (matrizObjetos[xy[0]+cont][xy[1]] instanceof Lakelurk) || (matrizObjetos[xy[0]+cont][xy[1]] instanceof Ghoul)){
                                    Blindado elemento = (Blindado)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getShotgun().getDaño()*elemento.getShotgun().getPrecision()/100+elemento.getShotgun().getPenetracion());
                                    matrizObjetos[xy[0]+cont][xy[1]].setSalud(matrizObjetos[xy[0]+cont][xy[1]].getSalud()-damage);
                                    jLabel1.setText("Revenant inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]+cont][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]+cont][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]+cont][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }
                            }
                            if(xy[1]+cont<=4){
                                if((matrizObjetos[xy[0]][xy[1]+cont] instanceof Chubby) || (matrizObjetos[xy[0]][xy[1]+cont] instanceof Lakelurk) || (matrizObjetos[xy[0]][xy[1]+cont] instanceof Ghoul)){
                                    Blindado elemento = (Blindado)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getShotgun().getDaño()*elemento.getShotgun().getPrecision()/100+elemento.getShotgun().getPenetracion());
                                    matrizObjetos[xy[0]][xy[1]+cont].setSalud(matrizObjetos[xy[0]][xy[1]+cont].getSalud()-damage);
                                    jLabel1.setText("Revenant inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]][xy[1]+cont].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]+cont] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]+cont].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }
                            }
                            cont++;
                        }
                        break;
                    }
                case 2:
                    if(EncontrarExplorador()){
                        xy = RetornaExplorador();
                        cont = 0 ;
                        while(cont<= matrizObjetos[xy[0]][xy[1]].getRangoDeVision()){
                            if(xy[0]-cont>=0){
                                if((matrizObjetos[xy[0]-cont][xy[1]] instanceof Chubby) || (matrizObjetos[xy[0]-cont][xy[1]] instanceof Lakelurk) || (matrizObjetos[xy[0]-cont][xy[1]] instanceof Ghoul)){
                                    Explorador elemento = (Explorador)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getSniper().getDaño()*elemento.getSniper().getPrecision()/100+elemento.getSniper().getPenetracion());
                                    matrizObjetos[xy[0]-cont][xy[1]].setSalud(matrizObjetos[xy[0]-cont][xy[1]].getSalud()-damage);
                                    jLabel1.setText("Scout inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]-cont][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]-cont][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]-cont][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }   
                            }
                            if(xy[1]-cont>=0){
                                if((matrizObjetos[xy[0]][xy[1]-cont] instanceof Chubby) || (matrizObjetos[xy[0]][xy[1]-cont] instanceof Lakelurk) || (matrizObjetos[xy[0]][xy[1]-cont] instanceof Ghoul)){
                                    Explorador elemento = (Explorador)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getSniper().getDaño()*elemento.getSniper().getPrecision()/100+elemento.getSniper().getPenetracion());
                                    matrizObjetos[xy[0]][xy[1]-cont].setSalud(matrizObjetos[xy[0]][xy[1]-cont].getSalud()-damage);
                                    jLabel1.setText("Scout inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]][xy[1]-cont].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]-cont] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]-cont].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }
                            }
                            if (xy[0]+cont<=6){
                                if((matrizObjetos[xy[0]+cont][xy[1]] instanceof Chubby) || (matrizObjetos[xy[0]+cont][xy[1]] instanceof Lakelurk) || (matrizObjetos[xy[0]+cont][xy[1]] instanceof Ghoul)){
                                    Explorador elemento = (Explorador)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getSniper().getDaño()*elemento.getSniper().getPrecision()/100+elemento.getSniper().getPenetracion());
                                    matrizObjetos[xy[0]+cont][xy[1]].setSalud(matrizObjetos[xy[0]+cont][xy[1]].getSalud()-damage);
                                    jLabel1.setText("Scout inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]+cont][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]+cont][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]+cont][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }
                            }
                            if(xy[1]+cont<=4){
                                if((matrizObjetos[xy[0]][xy[1]+cont] instanceof Chubby) || (matrizObjetos[xy[0]][xy[1]+cont] instanceof Lakelurk) || (matrizObjetos[xy[0]][xy[1]+cont] instanceof Ghoul)){
                                    Explorador elemento = (Explorador)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getSniper().getDaño()*elemento.getSniper().getPrecision()/100+elemento.getSniper().getPenetracion());
                                    matrizObjetos[xy[0]][xy[1]+cont].setSalud(matrizObjetos[xy[0]][xy[1]+cont].getSalud()-damage);
                                    jLabel1.setText("Scout inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]][xy[1]+cont].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]+cont] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]+cont].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }
                            }
                            cont++;
                        }
                        break;
                    }
                case 3:
                    if(EncontrarAsesino()){
                        xy = RetornaAsesino();
                        //Dispara Dheylo
                        cont = 0;
                        while(cont<= matrizObjetos[xy[0]][xy[1]].getRangoDeVision()){
                            if(xy[0]-cont>=0){
                                if((matrizObjetos[xy[0]-cont][xy[1]] instanceof Chubby) || (matrizObjetos[xy[0]-cont][xy[1]] instanceof Lakelurk) || (matrizObjetos[xy[0]-cont][xy[1]] instanceof Ghoul)){
                                    Asesino elemento = (Asesino)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getArco().getDaño()*elemento.getArco().getPrecision()/100+elemento.getArco().getPenetracion());
                                    matrizObjetos[xy[0]-cont][xy[1]].setSalud(matrizObjetos[xy[0]-cont][xy[1]].getSalud()-damage);
                                    jLabel1.setText("Dheylo inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]-cont][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]-cont][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]-cont][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }   
                            }
                            if(xy[1]-cont>=0){
                                if((matrizObjetos[xy[0]][xy[1]-cont] instanceof Chubby) || (matrizObjetos[xy[0]][xy[1]-cont] instanceof Lakelurk) || (matrizObjetos[xy[0]][xy[1]-cont] instanceof Ghoul)){
                                    Asesino elemento = (Asesino)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getArco().getDaño()*elemento.getArco().getPrecision()/100+elemento.getArco().getPenetracion());
                                    matrizObjetos[xy[0]][xy[1]-cont].setSalud(matrizObjetos[xy[0]][xy[1]-cont].getSalud()-damage);
                                    jLabel1.setText("Dheylo inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]][xy[1]-cont].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]-cont] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]-cont].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }
                            }
                            if (xy[0]+cont<=6){
                                if((matrizObjetos[xy[0]+cont][xy[1]] instanceof Chubby) || (matrizObjetos[xy[0]+cont][xy[1]] instanceof Lakelurk) || (matrizObjetos[xy[0]+cont][xy[1]] instanceof Ghoul)){
                                    Asesino elemento = (Asesino)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getArco().getDaño()*elemento.getArco().getPrecision()/100+elemento.getArco().getPenetracion());
                                    matrizObjetos[xy[0]+cont][xy[1]].setSalud(matrizObjetos[xy[0]+cont][xy[1]].getSalud()-damage);
                                    jLabel1.setText("Dheylo inflingió "+damage+" de daño");
                                    if(matrizObjetos[xy[0]+cont][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]+cont][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]+cont][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }
                            }
                            if(xy[1]+cont<=4){
                                if((matrizObjetos[xy[0]][xy[1]+cont] instanceof Chubby) || (matrizObjetos[xy[0]][xy[1]+cont] instanceof Lakelurk) || (matrizObjetos[xy[0]][xy[1]+cont] instanceof Ghoul)){
                                    Asesino elemento = (Asesino)matrizObjetos[xy[0]][xy[1]];
                                    int damage = (elemento.getArco().getDaño()*elemento.getArco().getPrecision()/100+elemento.getArco().getPenetracion());
                                    matrizObjetos[xy[0]][xy[1]+cont].setSalud(matrizObjetos[xy[0]][xy[1]+cont].getSalud()-damage);
                                    jLabel1.setText("Dheylo inflingió " + damage + " de daño");
                                    if(matrizObjetos[xy[0]][xy[1]+cont].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]+cont] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]+cont].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                        break;
                                    }
                                }
                            }
                            cont++;
                        }
                        break;
                        }
                    }ActualizarMatriz();
        }
    }//GEN-LAST:event_DispararMouseClicked
    private int TipoLoot(int x,int y){
        if(matrizObjetos[x][y].getLoot() instanceof Botiquin){
            return 1;
        }
        else if(matrizObjetos[x][y].getLoot() instanceof Explosivo){
            return 2;
        }
        else{
            return 3;
        }
    }
    private void ItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemMouseClicked
        if(eleccionP==0){
            JOptionPane.showMessageDialog(null, "Debe de seleccionar el personaje que va a utilizar en esta ronda.");
        }
        else{
            int xy[];
            switch(eleccionP){
                case 1:
                    xy = RetornaBlindado();
                    Items loot = matrizObjetos[xy[0]][xy[1]].getLoot();
                    if(loot instanceof Botiquin){
                        Botiquin elemento = (Botiquin)loot;
                        matrizObjetos[xy[0]][xy[1]].setSalud(matrizObjetos[xy[0]][xy[1]].getSalud()+elemento.getCuracion());
                        jLabel1.setText("Salud aumentada");
                    }
                    else if(loot instanceof Explosivo){
                        xy = RetornaBlindado();
                        Explosivo elemento = (Explosivo)loot;
                        int radioExplosivo = 1;
                        int cont = elemento.getRangoExplosion();
                        while(radioExplosivo<=cont){
                            if(xy[0]-radioExplosivo>=0){
                                if(esZombie(xy[0]-radioExplosivo, xy[1])){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]-radioExplosivo][xy[1]].setSalud(matrizObjetos[xy[0]-radioExplosivo][xy[1]].getSalud()- elemento.getDaño());
                                    if(matrizObjetos[xy[0]-radioExplosivo][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]-radioExplosivo][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]-radioExplosivo][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }if(xy[1]-radioExplosivo>=0){
                                if(esZombie(xy[0], xy[1]-radioExplosivo)){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]][xy[1]-radioExplosivo].setSalud(matrizObjetos[xy[0]][xy[1]-radioExplosivo].getSalud()-damage);
                                    if(matrizObjetos[xy[0]][xy[1]-radioExplosivo].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]-radioExplosivo] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]-radioExplosivo].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }if (xy[0]+radioExplosivo<=6){
                                if(esZombie(xy[0]+radioExplosivo, xy[1])){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]+radioExplosivo][xy[1]].setSalud(matrizObjetos[xy[0]+radioExplosivo][xy[1]].getSalud()-damage);
                                    if(matrizObjetos[xy[0]+radioExplosivo][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]+radioExplosivo][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]+radioExplosivo][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }if(xy[1]+radioExplosivo<=4){
                                if(esZombie(xy[0], xy[1]+radioExplosivo)){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]][xy[1]+radioExplosivo].setSalud(matrizObjetos[xy[0]][xy[1]+radioExplosivo].getSalud()-damage);
                                    if(matrizObjetos[xy[0]][xy[1]+radioExplosivo].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]+radioExplosivo] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]+radioExplosivo].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }
                         radioExplosivo++;
                        } jLabel1.setText("Explosivo desplegado");
                    }
                    else{
                        Potenciador elemento = (Potenciador)loot;
                        int nivelExtra = elemento.getNivel();
                        int damageExtra = elemento.getDaño();
                        ActualizarStats();
                        Blindado personaje = (Blindado) matrizObjetos[xy[0]][xy[1]];
                        personaje.getShotgun().setDaño(personaje.getShotgun().getDaño()+damageExtra);
                        jLabel1.setText("Soldado listo!");
                    }
                    break;
                case 2:
                    xy = RetornaExplorador();
                    loot = matrizObjetos[xy[0]][xy[1]].getLoot();
                    if(loot instanceof Botiquin){
                        Botiquin elemento = (Botiquin)loot;
                        matrizObjetos[xy[0]][xy[1]].setSalud(matrizObjetos[xy[0]][xy[1]].getSalud()+elemento.getCuracion());
                        jLabel1.setText("Salud aumentada");
                    }
                    else if(loot instanceof Explosivo){
                        Explosivo elemento = (Explosivo)loot;
                        int radioExplosivo = 1;
                        int cont = elemento.getRangoExplosion();
                        while(radioExplosivo<=cont){
                            if(xy[0]-radioExplosivo>=0){
                                if(esZombie(xy[0]-radioExplosivo, xy[1])){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]-radioExplosivo][xy[1]].setSalud(matrizObjetos[xy[0]-radioExplosivo][xy[1]].getSalud()- elemento.getDaño());
                                    if(matrizObjetos[xy[0]-radioExplosivo][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]-radioExplosivo][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]-radioExplosivo][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }if(xy[1]-radioExplosivo>=0){
                                if(esZombie(xy[0], xy[1]-radioExplosivo)){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]][xy[1]-radioExplosivo].setSalud(matrizObjetos[xy[0]][xy[1]-radioExplosivo].getSalud()-damage);
                                    if(matrizObjetos[xy[0]][xy[1]-radioExplosivo].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]-radioExplosivo] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]-radioExplosivo].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }if (xy[0]+radioExplosivo<=6){
                                if(esZombie(xy[0]+radioExplosivo, xy[1])){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]+radioExplosivo][xy[1]].setSalud(matrizObjetos[xy[0]+radioExplosivo][xy[1]].getSalud()-damage);
                                    if(matrizObjetos[xy[0]+radioExplosivo][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]+radioExplosivo][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]+radioExplosivo][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }if(xy[1]+radioExplosivo<=4){
                                if(esZombie(xy[0], xy[1]+radioExplosivo)){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]][xy[1]+radioExplosivo].setSalud(matrizObjetos[xy[0]][xy[1]+radioExplosivo].getSalud()-damage);
                                    if(matrizObjetos[xy[0]][xy[1]+radioExplosivo].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]+radioExplosivo] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]+radioExplosivo].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }
                         radioExplosivo++;
                        } jLabel1.setText("Explosivo desplegado");
                    }
                    else{
                        Potenciador elemento = (Potenciador)loot;
                        int nivelExtra = elemento.getNivel();
                        int damageExtra = elemento.getDaño();
                        ActualizarStats();
                        Explorador personaje = (Explorador) matrizObjetos[xy[0]][xy[1]];
                        personaje.getSniper().setDaño(personaje.getSniper().getDaño()+damageExtra);
                        jLabel1.setText("Soldado listo!");
                    }
                    break;
                default:
                    xy = RetornaAsesino();
                    loot = matrizObjetos[xy[0]][xy[1]].getLoot();
                    if(loot instanceof Botiquin){
                        Botiquin elemento = (Botiquin)loot;
                        matrizObjetos[xy[0]][xy[1]].setSalud(matrizObjetos[xy[0]][xy[1]].getSalud()+elemento.getCuracion());
                        jLabel1.setText("Salud aumentada");
                    }
                    else if(loot instanceof Explosivo){
                        Explosivo elemento = (Explosivo)loot;
                        int radioExplosivo = 1;
                        int cont = elemento.getRangoExplosion();
                        while(radioExplosivo<=cont){
                            if(xy[0]-radioExplosivo>=0){
                                if(esZombie(xy[0]-radioExplosivo, xy[1])){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]-radioExplosivo][xy[1]].setSalud(matrizObjetos[xy[0]-radioExplosivo][xy[1]].getSalud()- elemento.getDaño());
                                    if(matrizObjetos[xy[0]-radioExplosivo][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]-radioExplosivo][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]-radioExplosivo][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }if(xy[1]-radioExplosivo>=0){
                                if(esZombie(xy[0], xy[1]-radioExplosivo)){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]][xy[1]-radioExplosivo].setSalud(matrizObjetos[xy[0]][xy[1]-radioExplosivo].getSalud()-damage);
                                    if(matrizObjetos[xy[0]][xy[1]-radioExplosivo].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]-radioExplosivo] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]-radioExplosivo].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }if (xy[0]+radioExplosivo<=6){
                                if(esZombie(xy[0]+radioExplosivo, xy[1])){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]+radioExplosivo][xy[1]].setSalud(matrizObjetos[xy[0]+radioExplosivo][xy[1]].getSalud()-damage);
                                    if(matrizObjetos[xy[0]+radioExplosivo][xy[1]].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]+radioExplosivo][xy[1]] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]+radioExplosivo][xy[1]].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }if(xy[1]+radioExplosivo<=4){
                                if(esZombie(xy[0], xy[1]+radioExplosivo)){
                                    int damage = (elemento.getDaño());
                                    matrizObjetos[xy[0]][xy[1]+radioExplosivo].setSalud(matrizObjetos[xy[0]][xy[1]+radioExplosivo].getSalud()-damage);
                                    if(matrizObjetos[xy[0]][xy[1]+radioExplosivo].getSalud()<=0){
                                        Items item = CrearItem();
                                        matrizObjetos[xy[0]][xy[1]+radioExplosivo] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,item);
                                        matrizEtiquetas[xy[0]][xy[1]+radioExplosivo].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Loot.jpg")));
                                        ActualizarMatriz();
                                    }
                                }
                            }
                         radioExplosivo++;
                        } jLabel1.setText("Explosivo desplegado");
                    }
                    else{
                        Potenciador elemento = (Potenciador)loot;
                        int nivelExtra = elemento.getNivel();
                        int damageExtra = elemento.getDaño();
                        ActualizarStats();
                        Asesino personaje = (Asesino) matrizObjetos[xy[0]][xy[1]];
                        personaje.getArco().setDaño(personaje.getArco().getDaño()+damageExtra);
                        jLabel1.setText("Soldado listo!");
                    }
                    break;
                    
            }
        }
    }//GEN-LAST:event_ItemMouseClicked

    //Metodos
    public int[] RetornaAsesino(){
        for(int i = 0;i<7;i++){
            for(int j = 0;j<5;j++){
                int[] posicion = new int[2];
                if(matrizObjetos[i][j] instanceof Asesino){
                    posicion[0]=i;
                    posicion[1]=j;
                    return posicion;
                }
            }
        }
        int[] posicion = new int[1];
        posicion[0] = 10;
        return posicion;
    }
    
    public boolean EncontrarAsesino(){
        for(int i = 0;i<7;i++){
            for(int j = 0;j<5;j++){
                if(matrizObjetos[i][j] instanceof Asesino){
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean EncontrarBlindado(){
        for(int i = 0;i<7;i++){
            for(int j = 0;j<5;j++){
                if(matrizObjetos[i][j] instanceof Blindado){
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean EncontrarExplorador(){
        for(int i = 0;i<7;i++){
            for(int j = 0;j<5;j++){
                if(matrizObjetos[i][j] instanceof Explorador){
                    return true;
                }
            }
        }
        return false;
    }
    
    public int[] RetornaBlindado(){
        for(int i = 0;i<7;i++){
            for(int j = 0;j<5;j++){
                int[] posicion = new int[2];
                if(matrizObjetos[i][j] instanceof Blindado){
                    posicion[0]=i;
                    posicion[1]=j;
                    return posicion;
                }
            }
        }
        int[] posicion = new int[1];
        posicion[0] = 10;
        return posicion;
    }
    
    public int[] RetornaExplorador(){
        for(int i = 0;i<7;i++){
            for(int j = 0;j<5;j++){
                int[] posicion = new int[2];
                if(matrizObjetos[i][j] instanceof Explorador){
                    posicion[0]=i;
                    posicion[1]=j;
                    return posicion;
                }
            }
        }
        int[] posicion = new int[1];
        posicion[0] = 10;
        return posicion;
    }
    
    public static boolean VerificarGaneZombies(){
        for(int y = 0;y<5;y++){
            if((matrizObjetos[0][y] instanceof Ghoul)||(matrizObjetos[0][y] instanceof Chubby)||(matrizObjetos[0][y] instanceof Lakelurk)){
                return true;
            }
        }
        return false;
    }
    
    public void TerminarTableroZombi(){
        for(int i=0;i<7;i++){
            for(int j=0;j<5;j++){
                matrizObjetos[i][j] = new Casilla (false, false, false, 0, 0, 0, 0, 0, 0,null);
                matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ZombieGane.png")));
                ActualizarMatriz();
            }
        }
        jRadioButton1.setEnabled(false);
        jRadioButton2.setEnabled(false);
        jRadioButton3.setEnabled(false);
        BotonAvanzar.setEnabled(false);
        BotonDerecha.setEnabled(false);
        BotonIzquierda.setEnabled(false);
        BotonRetroceder.setEnabled(false);
        HabilidadEspecial.setEnabled(false);
        Disparar.setEnabled(false);
        Item.setEnabled(false);
        jLabel1.setText("");
    }
    
    public void TerminarTableroHeroe(){
        if(turnos == 12 ){
            if(ZombiesMuertos()){
               for(int i=0;i<7;i++){
                    for(int j=0;j<5;j++){
                        matrizObjetos[i][j] = new Casilla (false, false, false, 0, 0, 0, 0, 0, 0,null);
                        matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/HeroeGane.jpg")));
                        ActualizarMatriz();
                    }
                }
            jRadioButton1.setEnabled(false);
            jRadioButton2.setEnabled(false);
            jRadioButton3.setEnabled(false);
            BotonAvanzar.setEnabled(false);
            BotonDerecha.setEnabled(false);
            BotonIzquierda.setEnabled(false);
            BotonRetroceder.setEnabled(false);
            HabilidadEspecial.setEnabled(false);
            Disparar.setEnabled(false);
            Item.setEnabled(false);
            jLabel1.setText("");
            }
        }
    }
     
    public boolean DeterminarCercania(int x, int y){
        int cont = 1;
        while (cont<=2){
            //Hacia atras
            boolean condicion = (x-cont>=0);
            if(condicion){
               if ((matrizObjetos[x-cont][y] instanceof Asesino) ||(matrizObjetos[x-cont][y] instanceof Blindado) || (matrizObjetos[x-cont][y] instanceof Explorador)){
                  return true; 
                }
            }
            //Hacia atras
            boolean condicion2 = (x+cont<=6);
            if(condicion2){
               if ((matrizObjetos[x+cont][y] instanceof Asesino) ||(matrizObjetos[x+cont][y] instanceof Blindado) || (matrizObjetos[x+cont][y] instanceof Explorador)){
                  return true; 
                }
            }
            //Hacia la derecha
            boolean condicion3 = (y+cont<=4);
            if(condicion3){
               if ((matrizObjetos[x][y+cont] instanceof Asesino) ||(matrizObjetos[x][y+cont] instanceof Blindado) || (matrizObjetos[x][y+cont] instanceof Explorador)){
                  return true;  
                }
            }
            //Hacia la izquierda
            boolean condicion4 = (y-cont>=0);
            if(condicion4){
               if ((matrizObjetos[x][y-cont] instanceof Asesino) ||(matrizObjetos[x][y-cont] instanceof Blindado) || (matrizObjetos[x][y-cont] instanceof Explorador)){
                  return true; 
               }
            }
            cont++;
        }
        return false;
    }
    
    public boolean DeterminarRuido(int x, int y){
        int ruido = 0;
        int personaje = 0;
        boolean bandera = true; 
         for(int i = 0; i<7;i++){
             if(bandera){
                 for(int j = 0; j<5;j++){
                    if(matrizObjetos[i][j] instanceof Asesino){
                        Asesino elemento = (Asesino) matrizObjetos[i][j];
                        if(elemento.getArco().getRuido()>0){
                            //System.out.println("Asesino");
                            ruido = elemento.getArco().getRuido();
                            personaje = 1;
                            bandera= false;
                            break;
                        }
                    }else if(matrizObjetos[i][j] instanceof Blindado){
                        Blindado elemento = (Blindado) matrizObjetos[i][j];
                        if(elemento.getShotgun().getRuido()>0){
                            //System.out.println("Blindado");
                            ruido = elemento.getShotgun().getRuido();
                            bandera= false;
                            personaje = 2;
                            break;
                        }
                    }else if(matrizObjetos[i][j] instanceof Explorador){
                        Explorador elemento = (Explorador) matrizObjetos[i][j];
                        if(elemento.getSniper().getRuido()>0){
                            //System.out.println("Explorador");
                            ruido = elemento.getSniper().getRuido();
                            bandera= false;
                            personaje = 3;
                            break;
                        }
                    }
                }
             }
        }
        int cont = ruido;
        while (cont!=0){
            //Hacia arriba
            boolean condicion = (x-cont>=0);
            if(condicion){
                switch (personaje) {
                    case 1:
                        if (matrizObjetos[x-cont][y] instanceof Asesino){
                            return true;
                        }   break;
                    case 2:
                        if (matrizObjetos[x-cont][y] instanceof Blindado){
                            return true;
                        }   break;
                    case 3:
                        if (matrizObjetos[x-cont][y] instanceof Explorador){
                            return true;
                        }   break;
                    default:
                        break;
                }
            }
            //Hacia atras
            boolean condicion2 = (x+cont<=6);
            if(condicion2){
               switch (personaje) {
                    case 1:
                        if (matrizObjetos[x+cont][y] instanceof Asesino){
                            return true;
                        }   break;
                    case 2:
                        if (matrizObjetos[x+cont][y] instanceof Blindado){
                            return true;
                        }   break;
                    case 3:
                        if (matrizObjetos[x+cont][y] instanceof Explorador){
                            return true;
                        }   break;
                    default:
                        break;
                }
            }
            //Hacia la derecha
            boolean condicion3 = (y+cont<=4);
            if(condicion3){
               switch (personaje) {
                    case 1:
                        if (matrizObjetos[x][y+cont] instanceof Asesino){
                            return true;
                        }   break;
                    case 2:
                        if (matrizObjetos[x][y+cont] instanceof Blindado){
                            return true;
                        }   break;
                    case 3:
                        if (matrizObjetos[x][y+cont] instanceof Explorador){
                            return true;
                        }   break;
                    default:
                        break;
                }
            }
            //Hacia la izquierda
            boolean condicion4 = (y-cont>=0);
            if(condicion4){
               switch (personaje) {
                    case 1:
                        if (matrizObjetos[x][y-cont] instanceof Asesino){
                            return true;
                        }   break;
                    case 2:
                        if (matrizObjetos[x][y-cont] instanceof Blindado){
                            return true;
                        }   break;
                    case 3:
                        if (matrizObjetos[x][y-cont] instanceof Explorador){
                            return true;
                        }   break;
                    default:
                        break;
                }
            }
            cont--;
        }
        return false;
    }
    
    public boolean VerificarAtacar(int i, int j){
        if(i-1>=0){
            if((matrizObjetos[i-1][j] instanceof Asesino) || (matrizObjetos[i-1][j] instanceof Blindado) || (matrizObjetos[i-1][j] instanceof Explorador)){
            return true;
            }
        }
        if(i+1<=6){
            if((matrizObjetos[i+1][j] instanceof Asesino) || (matrizObjetos[i+1][j] instanceof Blindado) || (matrizObjetos[i+1][j] instanceof Explorador)){
            return true;
            }
        }
        if(j+1<=4){
            if((matrizObjetos[i][j+1] instanceof Asesino) || (matrizObjetos[i][j+1] instanceof Blindado) || (matrizObjetos[i][j+1] instanceof Explorador)){
            return true;
            }
        }
        if(j-1>=0){
          if((matrizObjetos[i][j-1] instanceof Asesino) || (matrizObjetos[i][j-1] instanceof Blindado) || (matrizObjetos[i][j-1] instanceof Explorador)){
            return true;
            }  
        }
        return false;
    }
    
    public boolean MoverZombieVision(int x, int y){
        int cont = 1;
        while (cont<=2){
            //Hacia atras
            boolean condicion = (x-cont>=0);
            if(condicion){
                if(matrizObjetos[x-1][y] instanceof Casilla){
                    Casilla elemento = (Casilla) matrizObjetos[x-1][y];
                    if(!elemento.isObstaculizado()){
                        if ((matrizObjetos[x-cont][y] instanceof Asesino) ||(matrizObjetos[x-cont][y] instanceof Blindado) || (matrizObjetos[x-cont][y] instanceof Explorador)){
                            jLabel1.setText("Soldado cerca");
                            matrizObjetos[x-1][y] = matrizObjetos[x][y];
                            matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                        }
                    }
                }
            }
            //Hacia atras
            boolean condicion2 = (x+cont<=6);
            if(condicion2){
               if(matrizObjetos[x-1][y] instanceof Casilla){
                    Casilla elemento = (Casilla) matrizObjetos[x-1][y];
                    if(!elemento.isObstaculizado()){
                        if ((matrizObjetos[x+cont][y] instanceof Asesino) ||(matrizObjetos[x+cont][y] instanceof Blindado) || (matrizObjetos[x+cont][y] instanceof Explorador)){
                            jLabel1.setText("Soldado cerca");
                            matrizObjetos[x+1][y] = matrizObjetos[x][y];
                            matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                        }
                    }
                }
            }
            //Hacia la derecha
            boolean condicion3 = (y+cont<=4);
            if(condicion3){
               if(matrizObjetos[x][y+1] instanceof Casilla){
                    Casilla elemento = (Casilla) matrizObjetos[x][y+1];
                    if(!elemento.isObstaculizado()){
                        if ((matrizObjetos[x][y+cont] instanceof Asesino) ||(matrizObjetos[x][y+cont] instanceof Blindado) || (matrizObjetos[x][y+cont] instanceof Explorador)){
                            jLabel1.setText("Soldado cerca");
                            matrizObjetos[x][y+1] = matrizObjetos[x][y];
                            matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                        }
                    }
                }
            }
            //Hacia la izquierda
            boolean condicion4 = (y-cont>=0);
            if(condicion4){
               if(matrizObjetos[x][y-1] instanceof Casilla){
                    Casilla elemento = (Casilla) matrizObjetos[x][y-1];
                    if(!elemento.isObstaculizado()){
                        if ((matrizObjetos[x][y-cont] instanceof Asesino) ||(matrizObjetos[x][y-cont] instanceof Blindado) || (matrizObjetos[x][y-cont] instanceof Explorador)){
                            jLabel1.setText("Soldado cerca");
                            matrizObjetos[x][y-1] = matrizObjetos[x][y];
                            matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                            matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                        }
                    }
                }
            }
            cont++;
        }
        return false;
    }
    
    public boolean MoverZombieRuido(int x, int y){
        int ruido = 0;
        int personaje = 0;
        boolean bandera = true; 
         for(int i = 0; i<7;i++){
             if(bandera){
                 for(int j = 0; j<5;j++){
                    if(matrizObjetos[i][j] instanceof Asesino){
                        Asesino elemento = (Asesino) matrizObjetos[i][j];
                        if(elemento.getArco().getRuido()>0){
                            //System.out.println("Asesino");
                            ruido = elemento.getArco().getRuido();
                            personaje = 1;
                            bandera= false;
                            break;
                        }
                    }else if(matrizObjetos[i][j] instanceof Blindado){
                        Blindado elemento = (Blindado) matrizObjetos[i][j];
                        if(elemento.getShotgun().getRuido()>0){
                            //System.out.println("Blindado");
                            ruido = elemento.getShotgun().getRuido();
                            bandera= false;
                            personaje = 2;
                            break;
                        }
                    }else if(matrizObjetos[i][j] instanceof Explorador){
                        Explorador elemento = (Explorador) matrizObjetos[i][j];
                        if(elemento.getSniper().getRuido()>0){
                            //System.out.println("Explorador");
                            ruido = elemento.getSniper().getRuido();
                            bandera= false;
                            personaje = 3;
                            break;
                        }
                    }
                }
             }
        }
        int cont = ruido;
        while (cont!=0){
            //Hacia arriba
            boolean condicion = (x-cont>=0);
            if(condicion){
                 if(matrizObjetos[x-1][y] instanceof Casilla){
                    Casilla elemento = (Casilla) matrizObjetos[x-1][y];
                    if(!elemento.isObstaculizado()){
                        switch (personaje) {
                            case 1:
                                if (matrizObjetos[x-cont][y] instanceof Asesino){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x-1][y] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            case 2:
                                if (matrizObjetos[x-cont][y] instanceof Blindado){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x-1][y] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            case 3:
                                if (matrizObjetos[x-cont][y] instanceof Explorador){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x-1][y] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            default:
                                break;
                        }
                    }
                }
            }
            //Hacia atras
            boolean condicion2 = (x+cont<=6);
            if(condicion2){
                if(matrizObjetos[x+1][y] instanceof Casilla){
                    Casilla elemento = (Casilla) matrizObjetos[x+1][y];
                    if(!elemento.isObstaculizado()){
                        switch (personaje) {
                            case 1:
                                if (matrizObjetos[x+cont][y] instanceof Asesino){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x+1][y] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            case 2:
                                if (matrizObjetos[x+cont][y] instanceof Blindado){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x+1][y] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            case 3:
                                if (matrizObjetos[x+cont][y] instanceof Explorador){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x+1][y] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            default:
                                break;
                        }
                    }
                }
            }
            //Hacia la derecha
            boolean condicion3 = (y+cont<=4);
            if(condicion3){
                if(matrizObjetos[x][y+1] instanceof Casilla){
                    Casilla elemento = (Casilla) matrizObjetos[x][y+1];
                    if(!elemento.isObstaculizado()){
                       switch (personaje) {
                            case 1:
                                if (matrizObjetos[x][y+cont] instanceof Asesino){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x][y+1] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            case 2:
                                if (matrizObjetos[x][y+cont] instanceof Blindado){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x][y+1] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            case 3:
                                if (matrizObjetos[x][y+cont] instanceof Explorador){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x][y+1] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            default:
                                break;
                        } 
                    }
                }
            }
            //Hacia la izquierda
            boolean condicion4 = (y-cont>=0);
            if(condicion4){
                if(matrizObjetos[x][y-1] instanceof Casilla){
                    Casilla elemento = (Casilla) matrizObjetos[x][y-1];
                    if(!elemento.isObstaculizado()){
                        switch (personaje) {
                            case 1:
                                if (matrizObjetos[x][y-cont] instanceof Asesino){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x][y-1] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            case 2:
                                if (matrizObjetos[x][y-cont] instanceof Blindado){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x][y-1] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            case 3:
                                if (matrizObjetos[x][y-cont] instanceof Explorador){
                                    jLabel1.setText("Ruido cerca");
                                    matrizObjetos[x][y-1] = matrizObjetos[x][y];
                                    matrizObjetos[x][y] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[x][y].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }   break;
                            default:
                                break;
                        }
                    }
                }
            }
            cont--;
        }
        return false;
    }
    public void AtacarPersonaje(int i, int j){
        if(i-1>=0){
            if((matrizObjetos[i-1][j] instanceof Asesino) || (matrizObjetos[i-1][j] instanceof Blindado) || (matrizObjetos[i-1][j] instanceof Explorador)){
                matrizObjetos[i-1][j].setSalud(matrizObjetos[i-1][j].getSalud()-matrizObjetos[i][j].getAtaque());
                jLabel1.setText("Los zombies atacan");
                if(matrizObjetos[i-1][j].getSalud()<=0){
                    if(matrizObjetos[i-1][j] instanceof Blindado){
                        jRadioButton1.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }
                    else if(matrizObjetos[i-1][j] instanceof Explorador){
                        jRadioButton2.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }
                    else if(matrizObjetos[i-1][j] instanceof Asesino){
                        jRadioButton3.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }else{
                        //ES UN ZOMBI, CASILLA U OBSTACULO
                    }
                    matrizObjetos[i-1][j] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                    matrizEtiquetas[i-1][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                    ActualizarMatriz();
                    if(TodosMuertos()){
                        TerminarTableroZombi();
                    }
                }
            }
        }
        if(i+1<=6){
            if((matrizObjetos[i+1][j] instanceof Asesino) || (matrizObjetos[i+1][j] instanceof Blindado) || (matrizObjetos[i+1][j] instanceof Explorador)){
                matrizObjetos[i+1][j].setSalud(matrizObjetos[i+1][j].getSalud()-matrizObjetos[i][j].getAtaque());
                jLabel1.setText("Los zombies atacan");
                if(matrizObjetos[i+1][j].getSalud()<=0){
                    if(matrizObjetos[i-1][j] instanceof Blindado){
                        jRadioButton1.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }
                    else if(matrizObjetos[i-1][j] instanceof Explorador){
                        jRadioButton2.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }
                    else if(matrizObjetos[i-1][j] instanceof Asesino){
                        jRadioButton3.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }else{
                        //ES UN ZOMBI, CASILLA U OBSTACULO
                    }
                    matrizObjetos[i-1][j] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                    matrizEtiquetas[i-1][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                    ActualizarMatriz();
                    if(TodosMuertos()){
                        TerminarTableroZombi();
                    }
                }
            }
        }
        if(j+1<=4){
            if((matrizObjetos[i][j+1] instanceof Asesino) || (matrizObjetos[i][j+1] instanceof Blindado) || (matrizObjetos[i][j+1] instanceof Explorador)){
                matrizObjetos[i][j+1].setSalud(matrizObjetos[i][j+1].getSalud()-matrizObjetos[i][j].getAtaque());
                jLabel1.setText("Los zombies atacan");
                if(matrizObjetos[i][j+1].getSalud()<=0){
                    if(matrizObjetos[i-1][j] instanceof Blindado){
                        jRadioButton1.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }
                    else if(matrizObjetos[i-1][j] instanceof Explorador){
                        jRadioButton2.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }
                    else if(matrizObjetos[i-1][j] instanceof Asesino){
                        jRadioButton3.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }else{
                        //ES UN ZOMBI, CASILLA U OBSTACULO
                    }
                    matrizObjetos[i-1][j] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                    matrizEtiquetas[i-1][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                    ActualizarMatriz();
                    if(TodosMuertos()){
                        TerminarTableroZombi();
                    }
                }
            }
        }
        if(j-1>=0){
          if((matrizObjetos[i][j-1] instanceof Asesino) || (matrizObjetos[i][j-1] instanceof Blindado) || (matrizObjetos[i][j-1] instanceof Explorador)){
              matrizObjetos[i][j-1].setSalud(matrizObjetos[i][j-1].getSalud()-matrizObjetos[i][j].getAtaque());
              jLabel1.setText("Los zombies atacan");
              if(matrizObjetos[i][j-1].getSalud()<=0){
                  if(matrizObjetos[i-1][j] instanceof Blindado){
                        jRadioButton1.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }
                    else if(matrizObjetos[i-1][j] instanceof Explorador){
                        jRadioButton2.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }
                    else if(matrizObjetos[i-1][j] instanceof Asesino){
                        jRadioButton3.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Soldado caido a reagruparnos");
                    }else{
                        //ES UN ZOMBI, CASILLA U OBSTACULO
                    }
                    matrizObjetos[i-1][j] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                    matrizEtiquetas[i-1][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                    ActualizarMatriz();
                    if(TodosMuertos()){
                        TerminarTableroZombi();
                    }
                }
            }  
        }
    }
    
    public void MoverZombies() {
        for(int i = 0; i<7;i++){
            for(int j = 0; j<5;j++){
                if((matrizObjetos[i][j] instanceof Ghoul)||(matrizObjetos[i][j] instanceof Chubby)||(matrizObjetos[i][j] instanceof Lakelurk)){
                    boolean condicion = i-1>=0;
                    if(condicion){
                        if(VerificarAtacar(i,j)){
                            //Función atacar
                            AtacarPersonaje(i,j);
                        }else if(DeterminarCercania(i,j)){
                            //Avanza hacia el jugador
                            MoverZombieVision(i,j);
                        }else if(DeterminarRuido(i,j)){
                            //Avanza hacia el sonido
                            MoverZombieRuido(i,j);
                        }else{
                            if(matrizObjetos[i-1][j] instanceof Casilla){
                                Casilla elemento = (Casilla) matrizObjetos[i-1][j];
                                if(!elemento.isObstaculizado()){
                                    matrizObjetos[i-1][j] = matrizObjetos[i][j];
                                    matrizObjetos[i][j] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
                                    matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
                                }
                            }
                        }
                    }
                }
            }
        }
        if(VerificarGaneZombies()){
            TerminarTableroZombi();
        }
        else{
            TerminarTableroHeroe();
        }
    }
    public void ActualizarMatriz(){
        for(int i = 0; i<7;i++){
            for(int j = 0;j<5;j++){
                if(matrizObjetos[i][j] instanceof Casilla){
                    Casilla elemento = (Casilla) matrizObjetos[i][j];
                    if(elemento.isObstaculizado()){
                        matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Obstaculo.jpg")));
                    }
                }
                else if(matrizObjetos[i][j] instanceof Asesino){
                   matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaAsesino.jpg")));
                }
                else if(matrizObjetos[i][j] instanceof Blindado){
                    matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaPesado.jpg")));
                }
                else if(matrizObjetos[i][j] instanceof Chubby){
                   matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ChubbyCasilla.jpg")));
                }
                else if(matrizObjetos[i][j] instanceof Explorador){
                   matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaSniper.jpg")));
                }
                else if(matrizObjetos[i][j] instanceof Ghoul){
                    matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/GhoulCasilla.jpg")));
                }
                else {
                    matrizEtiquetas[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/LakelurkCasilla.jpg")));
                }   
            }
        }      
    }
    public void IniciarTablero(){
        tablero.setLayout(new GridLayout(7,5,5,5));//LLenar el arreglo de todos los labels
        for(int i = 0; i<arregloEtiquetas.length;i++){
            arregloEtiquetas[i] = new JLabel();
            arregloEtiquetas[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/CasillaDefault.jpg")));
            tablero.add(arregloEtiquetas[i]);
        }
        //Llenar la matriz de etiquetas
        int e = 0;
        while(e<35){
            for(int x = 0;x<7;x++){
                for(int y = 0;y<5;y++){
                    matrizEtiquetas[x][y] = arregloEtiquetas[e];
                    e++;
                }
            }
        }
        //Inicializar la matriz de objetos poniendo todo en casillas
        for(int i = 0; i<7;i++){
            for(int j = 0;j<5;j++){
                matrizObjetos[i][j] = new Casilla(false, false, false, 0, 0, 0, 0, 0, 0,null);
            }
        }
        //Declaramos cual va a ser la entrada a la base
         for(int z = 0;z<5;z++){
            matrizObjetos[0][z] = new Casilla(false, false, true, 0, 0, 0, 0, 0, 0,null);
            matrizEtiquetas[0][z].setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Entrada.jpg"))); 
        }
        //Personajes y Zombies Iniciales
        
        //Armas
        Arma sniper = new Arma (900,4,250,90,false);
        Arma shotgun = new Arma(1000,3,200,55,false);
        Arma arco = new Arma(500,0,50,80,false);
        //Casilla Obstaculizada
        matrizObjetos[3][3] = new Casilla(true, false, false, 0, 0, 0, 0, 0, 0,null);
        matrizObjetos[4][1] = new Casilla(true, false, false, 0, 0, 0, 0, 0, 0,null);
        //Personajes
        matrizObjetos[2][2] = new Asesino(1,1000,0,0,3,0,null,arco);
        matrizObjetos[1][1] = new Blindado(0, false,1,3000,0,0,2,0,null,shotgun);
        matrizObjetos[1][4] = new Explorador(1,750,0,0,5,0,null,sniper);
        //Zombies
        matrizObjetos[6][2] = new Chubby(25,1,2500,1000,0,2,0,null);
        matrizObjetos[5][4] = new Ghoul(10,1,950,500,0,2,0,null);      
        matrizObjetos[6][0] = new Lakelurk(1,1500,1500,0,2,0,null);
        //Llamada a Actualizar
        ActualizarMatriz();   
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BotonAvanzar;
    private javax.swing.JLabel BotonDerecha;
    private javax.swing.JLabel BotonIzquierda;
    private javax.swing.JLabel BotonRetroceder;
    private javax.swing.JLabel Disparar;
    private javax.swing.JLabel HabilidadEspecial;
    private javax.swing.JLabel Item;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelBotonSalir;
    private javax.swing.JLabel jLabelMensaje1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JInternalFrame tablero;
    // End of variables declaration//GEN-END:variables
}